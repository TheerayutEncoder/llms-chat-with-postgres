import os
import psycopg2
import json
from tabulate import tabulate
import sys
import time
import threading
from dotenv import load_dotenv

from openai import OpenAI

# Set your OpenAI API key
load_dotenv()
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY', False)
# PostgreSQL credentials

# PostgreSQL credentials
HOST = os.environ.get('DB_HOST', False)
PORT = os.environ.get('DB_PORT', False)
DBNAME = os.environ.get('DB_NAME', False)
USER = os.environ.get('DB_USER', False)
PASSWORD = os.environ.get('DB_PASSWORD', False)

def loading_animation():
    """Shows animated dots while waiting for response."""
    dots = ["", ".", "..", "..."]
    i = 0
    while not done:
        sys.stdout.write(f"\rðŸ¤– is thinking{dots[i % len(dots)]} ")
        sys.stdout.flush()
        i += 1
        time.sleep(0.5)

schema = ''
with open('src/schema.txt', 'r') as file:
    schema = file.read()


prompt = (
    "Convert the following natural language query into a SQL SELECT statement according to Table Sale Order."
    "Always response in JSON format:"
    """
        Result:
        {
            'response': 'explain what llms thought',
            'sql_query': 'SQL query generated by the model.'
        }
    """
)

messages = [
            {
                "role": "system",
                "content": (
                    "Converts the given natural language query into a SQL SELECT statement according to Table Sale Order:\n"
                    "Using the following table schema:\n"
                    "{schema}\n"
                ).format(schema=schema),
            },
            {
                "role": "user",
                "content": prompt,
            }
        ]

def convert_to_sql(user_input: str) -> dict:

    client = OpenAI(
        api_key=OPENAI_API_KEY,  # This is the default and can be omitted
    )
    message = {
        "role": "user",
        "content": user_input,
    }
    messages.append(message)
    chat_completion = client.chat.completions.create(
        messages=messages,
        model="gpt-4o",
    )
    display_token_usage(chat_completion)
    response = chat_completion.choices[0].message.content
    new_message = {
        "role": "system",
        "content": response,
    }
    messages.append(new_message)
    return response

def execute_sql_query(sql_query: str) -> list:
    # Replace these with your PostgreSQL credentials
    conn = psycopg2.connect(
        host=HOST,
        port=PORT,
        dbname=DBNAME,
        user=USER,
        password=PASSWORD
    )
    cursor = conn.cursor()
    try:
        cursor.execute(sql_query)
        rows = cursor.fetchall()
        column_names = [desc[0] for desc in cursor.description]
        final_result = [dict(zip(column_names, row)) for row in rows]
        rows = final_result
    except Exception as e:
        print("An error occurred:", e)
        rows = None
    finally:
        cursor.close()
        conn.close()
    return rows

def display_token_usage(response: object):
    tokens_data = [
        ["Total Tokens", response.usage.total_tokens],
        ["Prompt Tokens", response.usage.prompt_tokens],
        ["Completion Tokens", response.usage.completion_tokens],
    ]
    print("\n=== Token Usage Summary ===")
    print(tabulate(tokens_data, headers=["Metric", "Count"], tablefmt="grid"))

if __name__ == "__main__":

    while True:
        natural_query = input("Enter a natural language query: ")
        if natural_query == 'exit':
            break

        # Start dot animation in a separate thread
        done = False
        t = threading.Thread(target=loading_animation)
        t.start()

        response = convert_to_sql(user_input=natural_query)

         # Stop animation
        done = True
        t.join()

        # Clear animation line and print response
        sys.stdout.write("\r" + " " * 30 + "\r")  # Clears the dots animation
        sys.stdout.flush()

        print("\n=== Response from Model ===\n")
        print(response)

        clean_response = response.replace("```json", "").replace("```", "").strip()
        json_response = json.loads(clean_response)
        print("\n=== Response in Json ===\n")
        print(json_response)

        sql_query = json_response['sql_query']
        # Execute the SQL query on your PostgreSQL database
        results = execute_sql_query(sql_query)
        print("\n=== Query Results ===\n")
        print(results)


